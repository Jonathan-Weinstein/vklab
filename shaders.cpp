/*
    Yeah so including big ascii C array initializers isn't great.
    Better could be some kind of "embed" thing to include binary data or some kind of linker thing.
    This could be a cool language feature:
        const uint32_t data = #include_binary("file.bin", begin=X, end=X);

    Though spirv is a fat format (see "SMOL-V") so code being in the executable might take up space
    that can't easily be reused.

    So I guess should read binary data from files, and free it when all shaders are compiled.

    Can also compile glsl at runtime.
*/
#include <stdint.h>


/*
#version 450 core

layout(std430, push_constant) uniform PushConstants {
    vec4 m; // mat2, [0] = .xy, [1] = .zw
    vec4 translation; // .xy only, then pad out the rest (IDK if needed?)
} pc;

layout(location = 0) out vec3 color;

void main()
{
    uint vid = gl_VertexIndex;

    color = vec3(
        vid == 0 ? 1 : 0,
        vid == 1 ? 1 : 0,
        vid == 2 ? 1 : 0
    );

    vec2 p = vec2(
        float(vid & 1u) * 0.50f, // 0, .5, 0
        float(vid & 2u) * 0.25f // 0, 0, .5
    );

    mat2 rotScale = mat2(pc.m.xy, pc.m.zw);
    gl_Position = vec4(rotScale * p + pc.translation.xy, 0, 1.0f);
}
*/
// this was derived from the above glsl:
static const uint32_t hello_vs_spirv[] =
{ 0x07230203,0x00010000,0x000d000a,0x0000005a,
0x00000000,0x00020011,0x00000001,0x0006000b,
0x00000001,0x4c534c47,0x6474732e,0x3035342e,
0x00000000,0x0003000e,0x00000000,0x00000001,
0x0008000f,0x00000000,0x00000004,0x6e69616d,
0x00000000,0x0000000b,0x00000011,0x0000004d,
0x00040047,0x0000000b,0x0000000b,0x0000002a,
0x00040047,0x00000011,0x0000001e,0x00000000,
0x00050048,0x00000037,0x00000000,0x00000023,
0x00000000,0x00050048,0x00000037,0x00000001,
0x00000023,0x00000010,0x00030047,0x00000037,
0x00000002,0x00050048,0x0000004b,0x00000000,
0x0000000b,0x00000000,0x00050048,0x0000004b,
0x00000001,0x0000000b,0x00000001,0x00050048,
0x0000004b,0x00000002,0x0000000b,0x00000003,
0x00050048,0x0000004b,0x00000003,0x0000000b,
0x00000004,0x00030047,0x0000004b,0x00000002,
0x00020013,0x00000002,0x00030021,0x00000003,
0x00000002,0x00040015,0x00000006,0x00000020,
0x00000000,0x00040015,0x00000009,0x00000020,
0x00000001,0x00040020,0x0000000a,0x00000001,
0x00000009,0x0004003b,0x0000000a,0x0000000b,
0x00000001,0x00030016,0x0000000e,0x00000020,
0x00040017,0x0000000f,0x0000000e,0x00000003,
0x00040020,0x00000010,0x00000003,0x0000000f,
0x0004003b,0x00000010,0x00000011,0x00000003,
0x0004002b,0x00000006,0x00000013,0x00000000,
0x00020014,0x00000014,0x0004002b,0x00000009,
0x00000016,0x00000001,0x0004002b,0x00000009,
0x00000017,0x00000000,0x0004002b,0x00000006,
0x0000001b,0x00000001,0x0004002b,0x00000006,
0x00000020,0x00000002,0x00040017,0x00000025,
0x0000000e,0x00000002,0x0004002b,0x0000000e,
0x0000002b,0x3f000000,0x0004002b,0x0000000e,
0x00000030,0x3e800000,0x00040018,0x00000033,
0x00000025,0x00000002,0x00040017,0x00000036,
0x0000000e,0x00000004,0x0004001e,0x00000037,
0x00000036,0x00000036,0x00040020,0x00000038,
0x00000009,0x00000037,0x0004003b,0x00000038,
0x00000039,0x00000009,0x00040020,0x0000003a,
0x00000009,0x00000036,0x0004002b,0x0000000e,
0x00000041,0x3f800000,0x0004002b,0x0000000e,
0x00000042,0x00000000,0x0004001c,0x0000004a,
0x0000000e,0x0000001b,0x0006001e,0x0000004b,
0x00000036,0x0000000e,0x0000004a,0x0000004a,
0x00040020,0x0000004c,0x00000003,0x0000004b,
0x0004003b,0x0000004c,0x0000004d,0x00000003,
0x00040020,0x00000058,0x00000003,0x00000036,
0x00050036,0x00000002,0x00000004,0x00000000,
0x00000003,0x000200f8,0x00000005,0x0004003d,
0x00000009,0x0000000c,0x0000000b,0x0004007c,
0x00000006,0x0000000d,0x0000000c,0x000500aa,
0x00000014,0x00000015,0x0000000d,0x00000013,
0x000600a9,0x00000009,0x00000018,0x00000015,
0x00000016,0x00000017,0x0004006f,0x0000000e,
0x00000019,0x00000018,0x000500aa,0x00000014,
0x0000001c,0x0000000d,0x0000001b,0x000600a9,
0x00000009,0x0000001d,0x0000001c,0x00000016,
0x00000017,0x0004006f,0x0000000e,0x0000001e,
0x0000001d,0x000500aa,0x00000014,0x00000021,
0x0000000d,0x00000020,0x000600a9,0x00000009,
0x00000022,0x00000021,0x00000016,0x00000017,
0x0004006f,0x0000000e,0x00000023,0x00000022,
0x00060050,0x0000000f,0x00000024,0x00000019,
0x0000001e,0x00000023,0x0003003e,0x00000011,
0x00000024,0x000500c7,0x00000006,0x00000029,
0x0000000d,0x0000001b,0x00040070,0x0000000e,
0x0000002a,0x00000029,0x00050085,0x0000000e,
0x0000002c,0x0000002a,0x0000002b,0x000500c7,
0x00000006,0x0000002e,0x0000000d,0x00000020,
0x00040070,0x0000000e,0x0000002f,0x0000002e,
0x00050085,0x0000000e,0x00000031,0x0000002f,
0x00000030,0x00050050,0x00000025,0x00000032,
0x0000002c,0x00000031,0x00050041,0x0000003a,
0x0000003b,0x00000039,0x00000017,0x0004003d,
0x00000036,0x0000003c,0x0000003b,0x00050051,
0x0000000e,0x00000043,0x0000003c,0x00000000,
0x00050051,0x0000000e,0x00000044,0x0000003c,
0x00000001,0x00050051,0x0000000e,0x00000045,
0x0000003c,0x00000002,0x00050051,0x0000000e,
0x00000046,0x0000003c,0x00000003,0x00050050,
0x00000025,0x00000047,0x00000043,0x00000044,
0x00050050,0x00000025,0x00000048,0x00000045,
0x00000046,0x00050050,0x00000033,0x00000049,
0x00000047,0x00000048,0x00050091,0x00000025,
0x00000050,0x00000049,0x00000032,0x00050041,
0x0000003a,0x00000051,0x00000039,0x00000016,
0x0004003d,0x00000036,0x00000052,0x00000051,
0x0007004f,0x00000025,0x00000053,0x00000052,
0x00000052,0x00000000,0x00000001,0x00050081,
0x00000025,0x00000054,0x00000050,0x00000053,
0x00050051,0x0000000e,0x00000055,0x00000054,
0x00000000,0x00050051,0x0000000e,0x00000056,
0x00000054,0x00000001,0x00070050,0x00000036,
0x00000057,0x00000055,0x00000056,0x00000042,
0x00000041,0x00050041,0x00000058,0x00000059,
0x0000004d,0x00000017,0x0003003e,0x00000059,
0x00000057,0x000100fd,0x00010038 };


const uint32_t * get_hello_vertex_spirv(size_t *pBytesize)
{
    *pBytesize = sizeof hello_vs_spirv;
    return hello_vs_spirv;
}

/*
#version 450 core
layout(location = 0) in vec3 color;
layout(location = 0) out vec4 attatchment0;
void main()
{
    attatchment0 = vec4(gl_FrontFacing ? color : vec3(1,1,1) - color, 1);
}
*/
// this was derived from the above glsl:
static const uint32_t hello_fs_spirv[] =
{ 0x07230203,0x00010000,0x000d000a,0x00000021,
0x00000000,0x00020011,0x00000001,0x0006000b,
0x00000001,0x4c534c47,0x6474732e,0x3035342e,
0x00000000,0x0003000e,0x00000000,0x00000001,
0x0008000f,0x00000004,0x00000004,0x6e69616d,
0x00000000,0x00000009,0x0000000c,0x00000014,
0x00030010,0x00000004,0x00000007,0x00040047,
0x00000009,0x0000001e,0x00000000,0x00040047,
0x0000000c,0x0000000b,0x00000011,0x00040047,
0x00000014,0x0000001e,0x00000000,0x00020013,
0x00000002,0x00030021,0x00000003,0x00000002,
0x00030016,0x00000006,0x00000020,0x00040017,
0x00000007,0x00000006,0x00000004,0x00040020,
0x00000008,0x00000003,0x00000007,0x0004003b,
0x00000008,0x00000009,0x00000003,0x00020014,
0x0000000a,0x00040020,0x0000000b,0x00000001,
0x0000000a,0x0004003b,0x0000000b,0x0000000c,
0x00000001,0x00040017,0x0000000e,0x00000006,
0x00000003,0x00040020,0x00000013,0x00000001,
0x0000000e,0x0004003b,0x00000013,0x00000014,
0x00000001,0x0004002b,0x00000006,0x00000017,
0x3f800000,0x0006002c,0x0000000e,0x00000018,
0x00000017,0x00000017,0x00000017,0x00050036,
0x00000002,0x00000004,0x00000000,0x00000003,
0x000200f8,0x00000005,0x0004003d,0x0000000a,
0x0000000d,0x0000000c,0x000300f7,0x00000012,
0x00000000,0x000400fa,0x0000000d,0x00000011,
0x00000016,0x000200f8,0x00000011,0x0004003d,
0x0000000e,0x00000015,0x00000014,0x000200f9,
0x00000012,0x000200f8,0x00000016,0x0004003d,
0x0000000e,0x00000019,0x00000014,0x00050083,
0x0000000e,0x0000001a,0x00000018,0x00000019,
0x000200f9,0x00000012,0x000200f8,0x00000012,
0x000700f5,0x0000000e,0x00000020,0x00000015,
0x00000011,0x0000001a,0x00000016,0x00050051,
0x00000006,0x0000001c,0x00000020,0x00000000,
0x00050051,0x00000006,0x0000001d,0x00000020,
0x00000001,0x00050051,0x00000006,0x0000001e,
0x00000020,0x00000002,0x00070050,0x00000007,
0x0000001f,0x0000001c,0x0000001d,0x0000001e,
0x00000017,0x0003003e,0x00000009,0x0000001f,
0x000100fd,0x00010038 };

const uint32_t * get_hello_fragment_spirv(size_t *pBytesize)
{
    *pBytesize = sizeof hello_fs_spirv;
    return hello_fs_spirv;
}
